Description: >
    Lito Molina
    This deploys the web site container (nginx).

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    KeyName:
        Description: The EC2 key pair to allow SSH  access instance
        Type: AWS::EC2::KeyPair::KeyName


Resources:

# Security Groups
    LoadBalancerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http traffic to and from the load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http and ssh to our load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            -   IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

# IAM Roles, Policy, and Instance Profile
    RootRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
                !Sub ${EnvironmentName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        - ec2.amazonaws.com
                    Action:
                    -  sts:AssumeRole
            Path: "/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
              - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
              - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

    RootInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
            - Ref: RootRole

# Autoscaling and Launch Configuration
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install awscli -y
                    snap install kubectl --classic
                    cd /
                    sudo curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && sudo chmod +x minikube && sudo mv minikube /usr/local/bin/
                    apt install docker.io -y
                    aws ecr get-login --region us-west-2 --no-include-email > aws_ecr_login.sh
                    cd /
                    chmod +x aws_ecr_login.sh
                    sudo ./aws_ecr_login.sh
                    sudo docker pull 133823844190.dkr.ecr.us-west-2.amazonaws.com/udacity-hub:mywebapp
                    # The next command is commented out since its only to test that the container can be run thru docker
                    # sudo docker run --name webapp -p 80:80 133823844190.dkr.ecr.us-west-2.amazonaws.com/udacity-hub:mywebapp
                    # sudo minikube start --vm-driver=none
                    # sudo kubectl run webapp --image=133823844190.dkr.ecr.us-west-2.amazonaws.com/udacity-hub:mywebapp --port=80
            ImageId: ami-06d51e91cea0dac8d
            KeyName: !Ref KeyName
            IamInstanceProfile: !Ref RootInstanceProfile
            SecurityGroups:
            -   Ref: WebServerSecGroup
            InstanceType: t3.medium
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10'

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            -   Fn::ImportValue:
                    !Sub "${EnvironmentName}-PUB-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '5'
            TargetGroupARNs:
            -   Ref: WebAppTargetGroup

# Load Balancers with Target Group and Listener
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            -   Ref: LoadBalancerSecGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn:
                    Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: '80'
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
    WebAppTargetGroup:
            Type: AWS::ElasticLoadBalancingV2::TargetGroup
            Properties:
                HealthCheckIntervalSeconds: 10
                HealthCheckPath: /
                HealthCheckProtocol: HTTP
                HealthCheckTimeoutSeconds: 8
                HealthyThresholdCount: 2
                Port: 80
                Protocol: HTTP
                UnhealthyThresholdCount: 5
                VpcId:
                    Fn::ImportValue:
                        Fn::Sub: "${EnvironmentName}-VPCID"
